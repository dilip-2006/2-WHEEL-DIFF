<?xml version="1.0"?>
<robot name="four_wheel_diff_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- Define constants for the robot -->
  <xacro:property name="wheel_radius" value="0.05"/>
  <xacro:property name="wheel_width" value="0.02"/>
  <xacro:property name="wheel_separation_length" value="0.3"/>
  <xacro:property name="wheel_separation_width" value="0.2"/>
  <xacro:property name="chassis_length" value="0.4"/>
  <xacro:property name="chassis_width" value="0.3"/>
  <xacro:property name="chassis_height" value="0.1"/>
  <xacro:property name="mass_chassis" value="2.0"/>
  <xacro:property name="mass_wheel" value="0.5"/>
  <xacro:property name="mass_caster" value="0.2"/>

  <!-- Define the base link (chassis) -->
  <link name="base_link">
    <inertial>
      <mass value="${mass_chassis}"/>
      <origin xyz="0 0 ${chassis_height/2}" rpy="0 0 0"/>
      <inertia ixx="0.1" ixy="0" ixz="0" iyy="0.1" iyz="0" izz="0.1"/>
    </inertial>
    <visual>
      <origin xyz="0 0 ${chassis_height/2}" rpy="0 0 0"/>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
      <material name="blue">
        <color rgba="0 0 1 1"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 ${chassis_height/2}" rpy="0 0 0"/>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
    </collision>
  </link>

  <!-- Define caster wheels -->
  <xacro:macro name="caster_wheel" params="prefix x y z">
    <link name="${prefix}_caster_wheel">
      <inertial>
        <mass value="${mass_caster}"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
      </inertial>
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <sphere radius="0.02"/>
        </geometry>
        <material name="gray">
          <color rgba="0.5 0.5 0.5 1"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <sphere radius="0.02"/>
        </geometry>
      </collision>
    </link>

    <joint name="${prefix}_caster_joint" type="fixed">
      <parent link="base_link"/>
      <child link="${prefix}_caster_wheel"/>
      <origin xyz="${x} ${y} ${z}" rpy="0 0 0"/>
    </joint>
  </xacro:macro>

  <!-- Add caster wheels at each corner -->
  <xacro:caster_wheel prefix="front_left" x="${chassis_length/2}" y="${chassis_width/2}" z="0"/>
  <xacro:caster_wheel prefix="front_right" x="${chassis_length/2}" y="-${chassis_width/2}" z="0"/>
  <xacro:caster_wheel prefix="rear_left" x="-${chassis_length/2}" y="${chassis_width/2}" z="0"/>
  <xacro:caster_wheel prefix="rear_right" x="-${chassis_length/2}" y="-${chassis_width/2}" z="0"/>

  <!-- Left wheel -->
  <link name="left_wheel">
    <inertial>
      <mass value="${mass_wheel}"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.002" iyz="0" izz="0.001"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
      <material name="black">
        <color rgba="0 0 0 1"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </collision>
  </link>

  <joint name="left_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="left_wheel"/>
    <origin xyz="0 ${chassis_width/2 + wheel_width/2} ${wheel_radius}" rpy="0 0 ${pi/2}"/>
    <axis xyz="0 1 0"/>
    <limit effort="10" velocity="10"/>
  </joint>

  <!-- Right wheel -->
  <link name="right_wheel">
    <inertial>
      <mass value="${mass_wheel}"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.002" iyz="0" izz="0.001"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
      <material name="black">
        <color rgba="0 0 0 1"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </collision>
  </link>

  <joint name="right_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="right_wheel"/>
    <origin xyz="0 -${chassis_width/2 + wheel_width/2} ${wheel_radius}" rpy="0 0 ${pi/2}"/>
    <axis xyz="0 1 0"/>
    <limit effort="10" velocity="10"/>
  </joint>

  <!-- Transmissions for the wheels -->
  <transmission name="left_wheel_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="left_wheel_motor"/>
    <joint name="left_wheel_joint"/>
    <mechanicalReduction>1</mechanicalReduction>
  </transmission>

  <transmission name="right_wheel_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="right_wheel_motor"/>
    <joint name="right_wheel_joint"/>
    <mechanicalReduction>1</mechanicalReduction>
  </transmission>

  <!-- Add LiDAR sensor -->
  <link name="lidar_link">
    <inertial>
      <mass value="0.1"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.05" length="0.1"/>
      </geometry>
      <material name="red">
        <color rgba="1 0 0 1"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.05" length="0.1"/>
      </geometry>
    </collision>
  </link>

  <joint name="lidar_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lidar_link"/>
    <origin xyz="0 0 ${chassis_height/2 + 0.05}" rpy="0 0 0"/>
  </joint>

  <!-- Add IMU sensor -->
  <link name="imu_link">
    <inertial>
      <mass value="0.01"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.02 0.02 0.02"/>
      </geometry>
      <material name="green">
        <color rgba="0 1 0 1"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.02 0.02 0.02"/>
      </geometry>
    </collision>
  </link>

  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="0 0 ${chassis_height/2}" rpy="0 0 0"/>
  </joint>

  <!-- Add Gazebo plugins for control and sensors -->
  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/</robotNamespace>
    </plugin>
  </gazebo>

  <gazebo reference="lidar_link">
    <sensor type="ray" name="lidar_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1</resolution>
            <min_angle>-3.14159</min_angle>
            <max_angle>3.14159</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.1</min>
          <max>10.0</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin name="gazebo_ros_lidar_controller" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <namespace>/</namespace>
          <remapping>~/out:=scan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>lidar_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="imu_link">
    <sensor type="imu" name="imu_sensor">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <plugin name="gazebo_ros_imu_controller" filename="libgazebo_ros_imu_sensor.so">
        <ros>
          <namespace>/</namespace>
          <remapping>~/out:=imu/data</remapping>
        </ros>
        <frame_name>imu_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>

</robot>